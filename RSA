import java.math.BigInteger;

public class RSA {
    public static void main(String[] args) {
        BigInteger p = BigInteger.valueOf(3);
        BigInteger q = BigInteger.valueOf(11);
        BigInteger n = p.multiply(q);
        BigInteger phi = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));

        BigInteger e = BigInteger.valueOf(2);
        while (!e.gcd(phi).equals(BigInteger.ONE)) e = e.add(BigInteger.ONE);

        BigInteger d = e.modInverse(phi);

        System.out.println("Public Key (e, n): (" + e + ", " + n + ")");
        System.out.println("Private Key (d, n): (" + d + ", " + n + ")");

        BigInteger M = BigInteger.valueOf(31);
        System.out.println("Original Message: " + M);

        BigInteger C = M.modPow(e, n);
        System.out.println("Encrypted Message: " + C);

        BigInteger decrypted = C.modPow(d, n);
        System.out.println("Decrypted Message: " + decrypted);
    }
}

