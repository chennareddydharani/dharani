public class RC4 {
    private int[] S = new int[256];
    private int i, j;

    // Key Scheduling Algorithm (KSA)
    public RC4(byte[] key) {
        for (i = 0; i < 256; i++) S[i] = i;
        j = 0;
        for (i = 0; i < 256; i++) {
            j = (j + S[i] + key[i % key.length]) & 0xFF;
            int temp = S[i]; S[i] = S[j]; S[j] = temp;
        }
        i = j = 0;
    }

    // Pseudo-Random Generation Algorithm (PRGA)
    public byte getByte() {
        i = (i + 1) & 0xFF;
        j = (j + S[i]) & 0xFF;
        int temp = S[i]; S[i] = S[j]; S[j] = temp;
        return (byte) S[(S[i] + S[j]) & 0xFF];
    }

    // Encrypt/Decrypt (same operation)
    public byte[] encryptDecrypt(byte[] data) {
        byte[] result = new byte[data.length];
        for (int k = 0; k < data.length; k++)
            result[k] = (byte) (data[k] ^ getByte());
        return result;
    }

    public static void main(String[] args) {
        String text = "Hello RC4!";
        String key = "KEY";

        RC4 rc4 = new RC4(key.getBytes());

        byte[] encrypted = rc4.encryptDecrypt(text.getBytes());
        System.out.println("Encrypted (bytes): " + java.util.Arrays.toString(encrypted));

        RC4 rc4Decrypt = new RC4(key.getBytes());
        byte[] decrypted = rc4Decrypt.encryptDecrypt(encrypted);
        System.out.println("Decrypted: " + new String(decrypted));
    }
}
